# -*- coding: utf-8 -*-
"""Recognition_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDkf_AKllDH_J65xZwuBCUVUlggbPp4u
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import datasets

#MNIST 데이터셋 다운 및 로드드

mnist = datasets.mnist
(train_x, train_y), (test_x, test_y) = mnist.load_data()

# 데이터 분할 확인
print(train_x.shape)
print(train_y.shape)
print(test_x.shape)
print(test_y.shape)

# 손글씨 숫자 이미지 크기 확인인

image = train_x[0]
print(image.shape)

plt.imshow(image, 'gray')
plt.show()

# 데이터 정규화
from tensorflow.keras.utils import to_categorical

train_x = train_x.reshape(-1,28,28,1)/255.
test_x = test_x.reshape(-1,28,28,1)/255.
train_y = to_categorical(train_y)
test_y = to_categorical(test_y)

# 모델 구성
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Flatten,BatchNormalization,Conv2D

model = Sequential()
model.add(Conv2D(32,(2,2),activation="relu",input_shape=(28,28,1)))
model.add(BatchNormalization())
model.add(Conv2D(64,(2,2),activation="relu"))
model.add(BatchNormalization())
model.add(Conv2D(128,(2,2),2,activation="relu"))
model.add(BatchNormalization())
model.add(Conv2D(32,(2,2),activation="relu"))
model.add(BatchNormalization())
model.add(Conv2D(64,(2,2),activation="relu"))
model.add(BatchNormalization())
model.add(Conv2D(128,(2,2),2,activation="relu"))
model.add(BatchNormalization())
model.add(Flatten())
model.add(Dense(128,activation="relu"))
model.add(Dense(10,activation="softmax"))

# 모델 훈련
model.compile(loss = "categorical_crossentropy",optimizer = "adam",metrics=["acc"])
history = model.fit(train_x,train_y,validation_data=(test_x,test_y),epochs=10,batch_size=256)

# 훈련 결과
loss = history.history["loss"]
acc = history.history["acc"]
val_loss = history.history["val_loss"]
val_acc = history.history["val_acc"]
plt.subplot(1,2,1)
plt.plot(range(len(loss)),loss,label = "Train Loss")
plt.plot(range(len(val_loss)),val_loss,label = "Validation Loss")
plt.grid()
plt.legend()
plt.subplot(1,2,2)
plt.plot(range(len(acc)),acc,label = "Train Accuracy")
plt.plot(range(len(val_acc)),val_acc,label = "Validation Accuracy")
plt.grid()
plt.legend()
plt.show()

# 모델 평가
test_loss, test_accuracy = model.evaluate(test_x,test_y, verbose = 2)
print("Test Loss : ",test_loss)
print("Test Accuracy : ",test_accuracy)